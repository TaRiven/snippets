#!/usr/local/bin/perl

use Net::SMTP;
use MIME::Parser;
use strict;

# Config data goes here.
my(%conf);

sub checkType
{
	my($type, $eff_type, $ok, @oktypes)=@_;

	@oktypes=();
	open(IN, "<$conf{'mime_ok'}");
	while(<IN>) {
		next if(/^#/);
		next unless(/\w/);
		chomp;
		push(@oktypes, $_);
	}
	close(IN);

	$ok=0;
	for(@oktypes) {
		if($type=~/$_/i) {
			$ok=1;
		}
	}
	if($ok==0) {
		# die("Type $type ($eff_type) is not a known good type.");
		die("Type $type is not a known good type.");
	}
}

sub checkName
{
	my($name)=@_;
	my(@badnames, $ok);

	# This is an autogenerated name, ignore it.
	return if($name=~/auto_generated-$$/);

	@badnames=();
	open(IN, "<$conf{'ext_bad'}");
	while(<IN>) {
		next if(/^#/);
		next unless(/\w/);
		chomp;
		push(@badnames, $_);
	}
	close(IN);

	$ok=1;
	for(@badnames) {
		if($name=~/$_$/i) {
			$ok=0;
		}
	}
	if($ok==0) {
		# die("Type $type ($eff_type) is not a known good type.");
		die("File $name does not an acceptable name.");
	}
}

sub analyze
{
	my($entity)=@_;
	my($type, $name, $eff_type);

	$type=$entity->mime_type;
	$eff_type=$entity->effective_type;
	$name=($entity->bodyhandle ? $entity->bodyhandle->path : "undef");

	# print "Type is $type ($eff_type), name is $name\n";

	unless($name eq "undef") {
		unlink($name);
	}

	checkType($type, $eff_type);
	checkName($name);

	for(0..($entity->parts-1)) {
		analyze($entity->parts($_));
	}
}

############
## Beginning
############

open(IN, "<mailfw.conf");
while(<IN>) {
	next if(/^#/);
	next unless(/\w/);
	chomp;
	my(@a)=split(/\s*=\s*/, $_, 2);
	$conf{$a[0]}=$a[1];
}
close(IN);

my $parser=MIME::Parser->new;

$parser->output_dir("out");
$parser->output_prefix("auto_generated");

my $tmpfile=IO::File->new_tmpfile();
print $tmpfile <STDIN>;

$tmpfile->seek(0, 0);

my $entity=$parser->read($tmpfile);

$tmpfile->seek(0, 0);

eval {
	analyze($entity);
};

if($@) {
	print "This E-mail has been rejected:  $@\n";
	# EX_NOPERM
	exit(77);
} else {

	eval {
		# print "E-mail accepted.\n";
		my($from, $to);

		$from=$ENV{'SENDER'};
		$to=$ENV{'RECIPIENT'};
		# print "Resending from $from to $to\n";

		my $smtp=Net::SMTP->new($conf{'mail_server'})
			|| die("Error instantiating SMTP");
		$smtp->mail($from) || die("Sender error");
		$smtp->to($to) || die("Recipient error");
		$smtp->data(<$tmpfile>) || die("Data error");
		$smtp->dataend() || die("End data error");
		$smtp->quit();
	};

	if($@) {
		print "Error processing SMTP stuff.\n";
		# EX_TEMPFAIL
		exit(75);
	}

	# EX_OK
	exit(0);
}
