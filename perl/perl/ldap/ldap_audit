#!/usr/local/bin/perl -w
# Copyright (c) 2000 Dustin Sallings <dustin@spy.net>
# $Id: ldap_audit,v 1.10 2000/03/03 21:05:14 dustin Exp $

use strict;

use Net::LDAP;
use Data::Dumper;
use LDAPSlave;

# Where to put the configuration
my(%config)=();

my($configfile);
if(@ARGV) {
	$configfile=$ARGV[0];
} else {
	$configfile='audit.conf';
}

read_config($configfile);

my $master = Net::LDAP->new($config{'ldap_server'}) or die "$@";

my $res=$master->bind ( dn => $config{'binddn'}, password => $config{'bindpw'});
if($res->code() != 0) {
	print STDERR "ERROR:  Unable to bind to master, giving up, check pw\n";
	exit(-1);
}

my @slaves=get_slaves();

audit($config{'base'}, $master, @slaves);

$master->unbind;
for(@slaves) { $_->ldap()->unbind };

sub audit {
	my($base, $master, @slaves)=@_;
	my($slave);

	my @master_dns=getDns($master, $base);
	my %master_hash=map { $_, 1 } @master_dns;

	# First, just compare the DNs both ways.
	for $slave (@slaves) {
		my @dns=getDns($slave->ldap(), $base);
		my %h=map { $_, 1 } @dns;
		@dns=();

		for(keys(%h)) {
			if(!defined($master_hash{$_})) {
				print "!!! $_ is not in the master !!!\n";
				if($config{'fixit'}==1) {
					print "Fixing.\n";
					$slave->ldap()->delete($_);
				}
			}
		}
		for(keys(%master_hash)) {
			if(!defined($h{$_})) {
				my $t=$slave->name();
				print "!!! $_ is not in the slave ($t) !!!\n";
				if($config{'fixit'}==1) {
					print "Fixing\n";
					my(%h)=gettree($master, $_);
					addEntry($slave->ldap(), %h);
				}
			}
		}
	}

	# Now do a compare on the data in each DN.
	my $dn;
	for $dn (@master_dns) {
		# We want a string and a hash of each.
		my $master_data="";
		my %master_data=();
		my $t="";
		eval {
			%master_data=gettree($master, $dn);
			$master_data=Dumper(\%master_data);
		};
		if($@) {
			print "Failed on $dn\n";
		}
		for $slave (@slaves) {
			$t = $slave->name();
			eval {
				my %slave_data=gettree($slave->ldap(), $dn);
				my $slave_data=Dumper(\%slave_data);

				if($master_data ne $slave_data) {
					# Free the Dumper output.
					$slave_data="";
					print "!!! $dn is not the same on $t !!!\n";
					if($config{'fixit'}==1) {
						# find and fix the differences
						print "Fixing\n";
						fixRecord($slave->ldap(), \%master_data, \%slave_data);
					}
					if($config{'debug'}>0) {
						print "MASTER:\n$master_data\nSLAVE:\n$slave_data\n";
					}
				}
			};

			if($@) {
				print "Failed for $dn on $t, missing ($@)?\n";
			}
		}
	}
}

sub gettree {
	my($ldap, $base)=@_;
	my($result, $entry, $att, $ret);

	$ret="";

	$result = $ldap->search ( 'base' => $base, 'scope' => 'base',
		'filter' => '(objectclass=*)',
	);

	$result->code && die $result->error;

	my %h=();
	for $entry ($result->all_entries()) {
		my $dn=$entry->dn();
		$h{$dn}{'dn'}=$dn;
		for $att (sort($entry->attributes())) {
			my(@vals);
			@vals=sort($entry->get($att));

			$h{$dn}{$att}=\@vals;
		}
	}

	return(%h);
}

sub getDns {
	my($ldap, $base)=@_;
	my($result, $entry, @ret);
	@ret=();
	$result = $ldap->search ( 'base' => $base, 'scope' => 'sub',
		'filter' => '(objectclass=*)', 'attrs' => ['dn']
	);

	if($result->code) {
		print STDERR "Error getting DNs: " . $result->error . "\n";
		die $result->error;
	}

	for $entry ($result->all_entries()) {
		push(@ret, $entry->dn());
	}
	return(sort(@ret));
}

sub fixRecord {
	my($slave_ldap, $master, $slave)=@_;
	# the dn is the key, the values contains the actual attributes and
	# values
	my($mtmp)=values(%$master);
	my($stmp)=values(%$slave);
	my(%master)=%$mtmp;
	my(%slave)=%$stmp;

	my $dn = $master{'dn'};

	my @atts=();
	my @deletes=();

	my $key;
	for $key (keys(%master)) {
		# skip the DN
		next if($key eq "dn");
		my @m=@{$master{$key}};
		my @s=();
		# Only do this if it's defined, else it'll get added anyway
		if(defined($slave{$key})) {
			@s=@{$slave{$key}};
		}

		if($#m!=$#s) {
			print "Different number of $key on master and slave:  $#m:$#s\n";
			push(@atts, $key);
		} else {
			for(0..$#m) {
				my $mval=$m[$_];
				my $sval=$s[$_];
				if($mval ne $sval) {
					print "Attribute $key is different:\n";
					print "MASTER:\n$mval\nSLAVE:\n$sval\nWill adjust.\n";
					push(@atts, $key);
				}
			}
		}
	}

	# Get rid of stuff that's on the slave, but not in the master.
	for $key (keys(%slave)) {
		if(!defined($master{$key})) {
			push(@deletes, $key);
		}
	}

	my(@replace) = ();
	# we always have to modify these.
	for('creatorsname', 'createtimestamp', 'modifiersname', 'modifytimestamp'){
		if(defined($master{$_})) {
			push(@replace, [ $_, $master{$_} ]);
		}
	}

	# make sure we only get one of any given attribute.
	my %atts=map { $_, 1 } @atts;
	for(keys %atts) {
		# Skip over the ``always'' ones.
		next if($_ eq "creatorsname");
		next if($_ eq "createtimestamp");
		next if($_ eq "modifiersname");
		next if($_ eq "modifytimestamp");

		push(@replace, [ $_, $master{$_} ]);
	}

	my @mods=();
	for(@replace) {
		push(@mods, 'replace', $_);
	}
	for(@deletes) {
		push(@mods, 'delete', [ $_, [] ] );
	}

	# do the modify
	my $res=$slave_ldap->modify($dn, 'changes' => \@mods );
	if($res->code()!=0) {
		print "WARNING!  Modify of $dn failed:  " . $res->code() . "\n";
	}
}

sub addEntry {
	my($slave_ldap, %entry)=@_;

	# Get the values past the dn
	my($mtmp)=values(%entry);
	%entry=%$mtmp;

	my $dn=$entry{'dn'};

	my(@attr)=();
	for(keys(%entry)) {
		next if($_ eq 'dn');
		push(@attr, $_, $entry{$_});
	}

	my $res=$slave_ldap->add('dn' => $dn, 'attr' => \@attr);
	if($res->code()!=0) {
		print "WARNING!  Add of $dn failed:  " . $res->code() . "\n";
	}
}

sub get_slaves {
	my(@slaves);
	for(split(/\s*,\s*/, $config{'slave_servers'})) {
		my($hostname, $binddn, $bindpw);

		if(defined($config{'slave.' . $_ . '.hostname'})) {
			$hostname=$config{'slave.' . $_ . '.hostname'};
		} else {
			$hostname=$_;
		}

		if(defined($config{'slave.' . $_ . '.binddn'})) {
			$binddn=$config{'slave.' . $_ . '.binddn'};
		} else {
			$binddn=$config{'binddn'};
		}

		if(defined($config{'slave.' . $_ . '.bindpw'})) {
			$bindpw=$config{'slave.' . $_ . '.bindpw'};
		} else {
			$bindpw=$config{'bindpw'};
		}

		my $tmp=Net::LDAP->new($hostname);
		if(!$tmp) {
			print "WARNING!  Failed to connect to $hostname, ignoring.\n";
			next;
		}

		my $res=$tmp->bind( dn => $binddn, password => $bindpw);
		if($res->code()==0) {
			push(@slaves, new LDAPSlave($_, $tmp));
		} else {
			print "WARNING!  Bind to $hostname failed, ignoring.\n";
		}
	}
	return(@slaves);
}

sub read_config {
	my($file)=@_;

	open(IN, $file) || die("Can't open $file:  $!\n");
	while(<IN>) {
		next if(/^#/);
		next unless(/\w/);
		chomp;
		my(@a)=split(/\s*=\s*/, $_, 2);

		$config{$a[0]}=$a[1];
	}
	close(IN);
}
