#!/usr/local/bin/perl
# Make an ldapmodify thingy out of an aliases file.

use Data::Dumper;

sub resolveAlias
{
    my($alias, $a)=@_;
    my(%a, @r, %loop, %tmp);
    %a=%{$a};
    %loop=();
    @r=();
    shift;shift;
    %loop=@_ if(@_);

    map {
        if(!defined($loop{$_})) {
            $loop{$_}=1;
            if(defined($a{$_})) {
                push(@r, resolveAlias($_, {%a}, %loop));
            } else {
                push(@r, $_);
            }
        } else {
           # print "Already did $_\n";
        }
    } split(/\s*,\s*/,$a{$alias});
    %tmp=map { $_, 1 } @r;
    return(keys(%tmp));
}

sub reverseAliases
{
	my($aliasFile)=@_;
    my(%a, %r);
    my($alias);

    %a=getAliases($aliasFile);

    for $alias (keys(%a)) {
	map { push(@{$r{$_}}, $alias) } resolveAlias($alias, {%a});
    }
    return(%r);
}

sub getAliases
{
	my($aliasFile)=@_;
    my(%ret);
	open(IN, $aliasFile);
	while(<IN>) {
		next if(/^#/);
		next unless(/:/);
		chomp;
		my($alias, $dest)=split(/\s*:\s*/);
		$ret{$alias}=$dest;
	}
	close(IN);
    return(%ret);
}

# Start here
if(@ARGV<2) {
	print "Usage:  $0 alias_file domain\n";
	exit(0);
}
my($alias, $domain)=@ARGV;
%r=reverseAliases($alias);

for $key (keys(%r)) {
	if($key!~/\@/) {
		print "$key hath no \@\n";
		next;
	}
	($uid)=split('@', $key);
	print "dn: uid=$uid, ou=Agents, dc=spy, dc=net\n";
	print "changetype: modify\n";
	print "replace: mailRoutingAddress\n";
	print "mailRoutingAddress: $key\n";

	my @tmp=();
	for(@{$r{$key}}) {
		next if($_ eq $uid);
		push(@tmp, $_);
	}

	if(@tmp) {
		print "-\nadd: mailLocalAddress\n";
		print map { "mailLocalAddress: $_\@$domain\n" } @tmp;
	}
	print "\n";
}
