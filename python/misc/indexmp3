#!/usr/bin/env python
"""
Create a usable indexed mirror of the mp3 tree with hard links.

Copyright (c) 2002  Dustin Sallings <dustin@spy.net>
$Id: indexmp3,v 1.1 2002/08/05 06:26:40 dustin Exp $
"""

import os, sys
import string
import getopt
import exceptions

latin="abcdefghijklmnopqrstuvwxyz" \
	+ "\xc0\xc1\xc2\xc3\xc4\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf" \
	+ "\xd1\xd2\xd3\xd4\xd5\xd6\xd9\xda\xdb\xdc" \
	+ "\xe0\xe1\xe2\xe3\xe4\xe5\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef" \
	+ "\xf1\xf2\xf3\xf4\xf5\xf6\xf9\xfa\xfb\xfc\xff\xfd\xf0\xd0"
ascii="abcdefghijklmnopqrstuvwxyzaaaaaceeeeiiiinooooouuuuaaaaaaceeeeiiiinooooouuuuyydd"
lettertrans=string.maketrans(latin, ascii)

class ExistingFile(exceptions.Exception):
	"""Exception thrown when a target file exists."""
	pass

class Mirror:

	def __init__(self, dest):
		self.dest=dest

	def mkdirs(self, dirs):
		"""Ensure all the directories are given.  The dirs argument is
		expected to be an array of path components"""
		path=''
		for d in dirs:
			path=os.path.join(path, d)
			if not os.path.isdir(path):
				print "Making " + path
				os.mkdir(path)

	def processFile(self, path):
		"""Process a file."""
		# Split the path into the components
		a=path.split('/')
		# Strip off the first four path components
		newa=a[-3:]
		# Add the target directory to what's left
		newa.insert(0, self.dest)
		# Grab the directory part of the destination
		newdira=newa[:-1]
		# Get the string form of the new path
		newdir=string.lower(apply(os.path.join, newdira))
		newpath=os.path.join(newdir, newa[-1])
		newpath=string.translate(newpath, lettertrans)
		# Make sure the destination directory exists
		self.mkdirs(os.path.split(newdir))
		# Make sure the destination file does *not* exist
		if os.path.exists(newpath):
			# raise ExistingFile(newpath)
			print "NOT LINKING " + newpath
		else:
			if path.endswith(".mp3"):
				# Display and link
				print path + " -> " + newpath
				os.link(path, newpath)
			else:
				print "Ignoring " + path

	def process(self, path):
		"""Process the path.  If it's a directory, recurse across each
		entry in that directory.  If it's a file, process the file."""
		if(os.path.isdir(path)):
			for f in os.listdir(path):
				self.process(os.path.join(path, f))
		else:
			self.processFile(path)

if __name__ == '__main__':
	dest=sys.argv[1]
	m=Mirror(dest)
	for f in sys.argv[2:]:
		m.process(f)
