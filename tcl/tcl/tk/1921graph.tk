#!/usr/local/bin/wish8.3
# Copyright (c) 1999  Dustin Sallings <dustin@spy.net>
# $Id: 1921graph.tk,v 1.8 2000/07/20 05:36:09 dustin Exp $

set width 640
set height 480

set gmtoffset -8

proc ctof { c } {
	return [expr ($c*9/5)+32]
}

proc showGraph { width height } {
	global dumpData gmtoffset

	canvas .g -relief raised -width $width -height $height
	pack .g -side top -fill x

	set start_time [expr $dumpData(mission_start)+($gmtoffset*3600)]
	set min_t [expr $dumpData(min_sample_time)+($gmtoffset*3600)]
	set max_t [expr $start_time+($dumpData(sample_rate)*60*$dumpData(mission_samples))]
	set items 0

	set min_v  99999
	set max_v -99999

	set rate $dumpData(sample_rate)

	set i 0
	foreach key [lsort [array names dumpData sample_data_*]] {
		set itmp [split $dumpData($key) {, }]

		set value [ctof [lindex $itmp 2] ]
		set mykey [expr $start_time+($rate*[lindex $itmp 0]*60)]

		set input($mykey) $value

		# Set the min for the values
		if { $value < $min_v } {
			set min_v $value
		}

		# set the max for the values
		if { $value > $max_v } {
			set max_v $value
		}

		incr items
		incr i
	}

	# figure out the margin
	set xmargin [expr int($width*.0625)]
	# Two thirds of the margin goes to the left
	set xleft [expr int(double($xmargin)*(2.0/3.0))]
	# One third of the margin goes to the right
	set xright [expr int(double($xmargin)*(1.0/3.0))]

	# the y factor
	set yfactor [expr ($height-40)/($max_v-$min_v+1)]
	# the x factor
	set xfactor [expr ($max_t-$min_t)/($width-($xmargin))]

	set minx $xleft
	set maxx [expr (($max_t-$min_t)/$xfactor)+$xleft]

	set miny [expr ($height-40-($max_v-$min_v)*$yfactor)]
	set maxy [expr ($height-20)]

	# Draw the box.
	.g create line $minx $miny $minx $maxy
	.g create line $maxx $miny $maxx $maxy
	.g create line $minx $miny $maxx $miny
	.g create line $minx $maxy $maxx $maxy

	######################################################################
	# Time lines
	######################################################################

	if { [expr $max_t-$min_t] < [expr 7*86400] } {
		set dashwidth 3600
	} else {
		set dashwidth [expr 12*3600]
	}

	# Draw the hour lines.
	set firstline [expr (($min_t / $dashwidth)+1) * $dashwidth ]
	for { set i $firstline } { $i < $max_t } { set i [expr $i + $dashwidth] } {
		set x [expr (($i-$min_t)/$xfactor)+$xleft]
		.g create line $x $maxy $x $miny -dash . -fill grey
	}

	set firstline [expr (($min_t / 86400)+1) * 86400 ]
	# Draw the day lines.
	for { set i $firstline } { $i < $max_t } { set i [expr $i + 86400 ] } {
		set x [expr (($i-$min_t)/$xfactor)+$xleft]
		.g create line $x $maxy $x $miny -fill grey
		.g addtag text withtag [.g create text $x [expr ($height-10)] \
			-text [clock format $i -format %m/%d]]
	}

	######################################################################

	######################################################################
	# Temp lines
	######################################################################

	set dashwidth 2
	# Draw the $dashwidth-degree lines.
	set v [expr (int($min_v/$dashwidth)*$dashwidth)+$dashwidth]
	for { set i $v } { $i < $max_v } { set i [expr $i + $dashwidth]} {
		set nadj [expr ($i-$min_v)]
		set y [expr ($height-40)-($nadj*$yfactor)]
		.g create line $minx $y $maxx $y -dash . -fill grey
	}

	# Draw the ten-degree lines.
	set v [expr (int($min_v/10)*10)+10]
	for { set i $v } { $i < $max_v } { set i [expr $i + 10 ] } {
		set nadj [expr ($i-$min_v)]
		set y [expr ($height-40)-($nadj*$yfactor)]
		.g create line $minx $y $maxx $y -fill grey
		.g addtag text withtag [.g create text [expr $xleft/2] $y -text $i]
	}

	######################################################################

	set lastx -1

	for { set i $min_t } { $i < $max_t } { set i [expr $i + ($rate*60)] } {
		catch {
			set n $input($i)

			set x [expr (($i-$min_t)/$xfactor)+$xleft]
			set nadj [expr ($n-$min_v)]
			set y [expr ($height-40)-($nadj*$yfactor)]

			if { $lastx >= 0 } {
				.g create line $lastx $lasty $x $y -width 1
			}

			set lastx $x
			set lasty $y
		}
	}
}

proc showHistogram { width height } {
	global dumpData

	canvas .h.g -relief raised -width $width -height $height
	pack .h.g -side top -fill x

	set input {}
	# Find the histogram entries.
	foreach key [lsort [array names dumpData histogram_*]] {
		set itmp [split $dumpData($key) {, }]
		set i [list [lindex $itmp 0 ] [ lindex $itmp 2 ] [ lindex $itmp 4] ]
		lappend input $i
	}

	set max 0
	set i 0
	set firsttemp 0
	set lasttemp 0
	set items 0
	foreach datum $input {
		set n [lindex $datum 2]
		# Set the max
		if {$n > $max} {
			set max $n
		}
		# Find the first temp
		if { ($firsttemp == 0) && ($n > 0) } {
			set firsttemp $i
		}
		# find the last temp
		if { $n > 0 } {
			set lasttemp $i
		}
		# If it's valid, count it
		if { $n>0 } {
			incr items
		}
		incr i
	}

	# The yfactor varies by the maximum value in the histogram
	set yfactor [expr ($height-20)/$max]
	# The xfactor varies by the number of valid data points in the histogram
	set xfactor [expr ($width-20)/$items]
	# The width varies by the number of items
	set bwidth [expr ($xfactor/2)-($xfactor*.10)]
	for { set i $firsttemp } { $i < $lasttemp } { incr i } {

		set datum [lindex $input $i ]

		set min [lindex $datum 0]
		set max [lindex $datum 1]
		set n [lindex $datum 2]

		set x [ expr ($i-$firsttemp+1) * $xfactor ]
		set y [expr ($height-20)-($n*$yfactor)]

		set color white
		if { $min < $dumpData(low_alarm) } {
			set color blue
		}
		if { $max > $dumpData(high_alarm) } {
			set color red
		}

		.h.g create rectangle [expr $x-$bwidth] [expr $height-20] \
			[expr $x+$bwidth] $y \
			-fill $color -width 1 -outline black

		.h.g addtag text withtag [.h.g create text $x [expr ($height-10)] \
			-text [ctof $min]]
		if { $n < 5 } {
			.h.g addtag text withtag [.h.g create text $x [expr ($y-10)] \
				-text $n]
		} else {
			.h.g addtag text withtag [.h.g create text $x [expr ($y+10)] \
				-text $n]
		}
	}
}

proc readDump { file } {
	global dumpData

	set fd [ open $file r ]

	catch { unset dumpData }

	while { [ gets $fd line ] != -1 } {
		set error [ catch {
			set kv [split $line =]
			set dumpData([lindex $kv 0]) [lindex $kv 1]
		} ]
		if { $error } {
			puts stderr "Damnit:  $error"
		}
	}

	close $fd
}

wm title . "Temperature Graph"
wm iconname . "1921"

readDump /tmp/dump
showGraph $width $height
toplevel .h -width 640 -height 480
showHistogram 640 480
