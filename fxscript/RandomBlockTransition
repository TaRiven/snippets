// Copyright (c) 2003  Dustin Sallings <dustin@spy.net>Transition "Random Blocks";Group "Dustin's Transitions";FullFrame;input hblock, "Horizontal Blocks", Slider, 2, 1, 100;input vblock, "Vertical Blocks", Slider, 2, 1, 100;input randseed, "Random Seed", slider, 13, 1, 100;input debug, "Debug", CheckBox, false;Codefloat ix, iy;// numBlocks is the total number of blocks for this render.float numBlocks;// todo is the number of blocks to reveal in this passfloat todo, todone;// Width and height of the entire framefloat w, h;// Frame boundarypoint bounds[4];// Width and height of the blocksfloat bw, bh;// x offset and y offsetfloat xoff, yoff;// Polygon for creating regions.point square[4];// Selections that will be pulled from behindregion r;// Temporary string for debugstring tmpstring;// Calculate the total number of blocks.  We add one to each dimension// to deal with errors where there might be a little bit of a dangling blocknumBlocks = (hblock + 1) * (vblock + 1);// todo is a function of the percentage completion of this transitiontodo = integer(numBlocks * ratio) + 1;// Need to make sure we don't have todo exceed or meet the number of blocksif (todo == numBlocks)	todo = (numBlocks - 1);end if// Here's an array of regions to copyregion tocopy[numBlocks];// Grab the current “from” frame for the destinationdest=src1;// Get the dimensions and sizes and stuffdimensionsOf(dest, w, h);boundsOf(dest, bounds);// Calculate the block width and heightbw = integer(w / hblock);bh = integer(h / vblock);// This time around, todone tracks the array position// First loop just generates the listtodone=0;for iy = 0 to vblock	yoff = bounds[0].y + (iy * bh);		square[0].y = yoff;	square[1].y = yoff;	square[2].y = yoff + bh;	square[3].y = yoff + bh;		for ix = 0 to hblock		xoff = bounds[0].x + (ix * bw);				square[0].x = xoff;		square[1].x = xoff + bw;		square[2].x = xoff + bw;		square[3].x = xoff;				if(debug)			drawSoftDot(dest, square[0], kRound, 5, 2, 2, kblue, 128, 1);			line(square[0], square[3], dest, kblue, 1);			line(square[0], square[1], dest, kblue, 1);			line(square[2], square[1], dest, kblue, 1);			line(square[2], square[3], dest, kblue, 1);		end if		makeRegion(square, r);		tocopy[todone]=r;				todone += 1;	nextnext// Now, we need to shuffle the list.RandomSeed(randseed);for ix = 0 to (numBlocks-1)	iy = integer(Random(0, numBlocks-1))		r = tocopy[iy]	tocopy[iy] = tocopy[ix]	tocopy[ix] = rnext// Now, copy in the regions we need to dofor ix = 0 to todo	regioncopy(dest, src2, dest, tocopy[ix], 0);next// And now for the obligatory debugif (debug)	SetTextSize(16);	NumToString(ratio, tmpstring, kFloat2);	MakeRect(bounds, -80, 0, 160, 40);	DrawStringPlain("rto: " + tmpstring, bounds, dest, kgreen, aspectof(dest));	NumToString(todo, tmpstring, kInteger);	MakeRect(bounds, -80, 20, 160, 40);	DrawStringPlain("tdo: " + tmpstring, bounds, dest, kgreen, aspectof(dest));	NumToString(bw, tmpstring, kInteger);	MakeRect(bounds, -80, 40, 160, 40);	DrawStringPlain("bw: " + tmpstring, bounds, dest, kgreen, aspectof(dest));	NumToString(bh, tmpstring, kInteger);	MakeRect(bounds, -80, 60, 160, 40);	DrawStringPlain("bh: " + tmpstring, bounds, dest, kgreen, aspectof(dest));	ResetText;End If;