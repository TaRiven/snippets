; colors

(define (colorbox n)
  (let* ((px (remainder n 16))
	  (py (integer (/ n 16))))
    (if #f (list px py n)
    (mbox (+ 5 (* 10 px))
	(+ 5 (* 10 py)) 5
	(lambda (x y r) n)))))

(define (colorchart b)
  (set! borders b)
  (gdemo
    (lambda ()
      (do ((i 0 (+ 1 i)))
	((> i 255) #n)
	(colorbox i)))))

; a line drawn horizontally at the color
; that is at the same percentage
; location in the color palette that is
; from the top of the screen
(define (hline y)
  (move 0 y)
  (set-fg (integer (* 256 (/ y 160))))
  (draw 160 y))

; same as above, but use the input
; numbers
(define (hline2 y)
  (move 0 y)
  (set-fg y)
  (draw 160 y))


; color gradient across the color map
(define (colorbars)
  (gdemo
    (lambda ()
      (do ((i 0 (+ 1 i)))
        ((> i 255) #n)
        (hline i)))))

(define (colorbars2)
  (gdemo
    (lambda ()
      (do ((i 0 (+ 1 i)))
        ((> i 255) #n)
        (hline2 i)))))

; make smooth gradients
(define (make-gradients)
  (do ((i 0 (+ i 1)) (r 255 (- r 2))
    (g 0 (+ 2 g)))
    ((> i 128) #n)
    (set-palette i r g 0))
  (do ((i 128 (+ i 1)) (g 255 (- g 2))
    (b 0 (+ 2 b)))
    ((> i 255) #n)
    (set-palette i 0 g b)))