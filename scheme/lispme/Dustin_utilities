; Dustin utilities

; display more than one object
; (stdout only)
(define (vdisplay . args)
  (for-each display args))

; simple add and subtract shortcuts
(macro (succ a) `(+ 1 ,(cadr a)))
(macro (pred a) `(- ,(cadr a) 1))

; round to a given place
; -1 = tens, 0 = ones, 1 = tenths
(macro (rounditm a)
  (let ((m (expt 10 (caddr a))))
    `(/ (round (* ,(cadr a) ,m)) ,m)))

; Prefix a string (s) with a given
; string (p) until the requested
; length (l) is met
(define (prefix-string s p l)
  (if (not (string? s))
    (prefix-string (object->string s)
	p l)
    (if (> l (string-length s))
      (prefix-string (string-append p s)
	  p l)
      s)))

; format a string
; supported:  %s, %%
(define (format s . a)
  (do ((si 0 (+ 1 si)) (ai 0 ai)
	(rv "" rv) (av "" av)
	(sc (string->list s) sc))
    ((>= si (length sc)) rv)
    (set! rv (string-append rv
      (if (= #\% (list-ref sc si))
	(begin
	  (set! si (+ 1 si))
	  (case (list-ref sc si)
	    ( (#\s)
		(set! av (list-ref a ai))
		(set! ai (+ 1 ai))
		(if (string? av)
		    av
		    (object->string av)))
	    ( (#\%)
		"%")
	    (else
		(error (string-append
		  "No such format char \""
		  (list->string (list
			(list-ref sc si)))
		  "\"")))))
	(list->string
	  (list (list-ref sc si))))))))

; Split a string on a char
(define (split s c)
  (string-tokenize s
    (list->string (list c))))

(macro (mprint a)
  (object->string (cdr a)))

; curry attempt
(macro (curry a)
  (let ((b (gensym)))
   `(lambda (,b)
      (,(cadr a) ,@(cddr a) ,b))))

; simple for loop
; note: this has two loops because it
; was more efficient than having one
(define (for start finish f)
  (letrec ((loop+ (lambda (n)
    (if (> n finish) #n
      (begin
        (f n)
        (loop+ (+ 1 n))))))
   (loop- (lambda (n)
    (if (< n finish) #n
      (begin
        (f n)
        (loop- (- n 1)))))))
  ((if (> finish start)
	loop+ loop-) start)))

; like perl's ..
(define (make-range a b)
  (letrec ((loop (lambda (rv v)
    (if (< v a) rv
      (loop (cons v rv) (- v 1))))))
    (loop '() b)))

; partition a list into those that meet
; this criteria and those that don't
(define (partition f lin)
  (letrec ((loop (lambda (l y n)
	(if (null? l)
	  (list (reverse y) (reverse n))
	  (if (f (car l))
	    (loop (cdr l) (cons (car l) y) n)
	    (loop (cdr l) y
		(cons (car l) n)))))))
	(loop lin '() '())))

; fold a list
(define (fold f i l)
  (if (null? l) i
    (fold f (f i (car l)) (cdr l))))

; fold the chars in a string
(define (fold-string f i s)
  (fold f i (string->list s)))

; map with an index
; this reverses because it builds
; backwards
(define (mapi f lin)
  (reverse
    (letrec ((loop (lambda (rv i l)
      (if (null? l) rv
        (loop (cons (f i (car l)) rv) (+ i 1)
	  (cdr l))))))
    (loop '() 0 lin))))

; quicksort using partition
; (new implementation)
(define (qsort lin . opcomp)
  ; this is all argument handling and
  ; stuff
  (let ((comp (if (pair? opcomp)
	(car opcomp) >)))
    (if (and
	  (not (continuation? comp))
	  (not (procedure? comp)))
        (set! comp  >))
  ; begin actual quicksort
  (letrec ((qs (lambda (l)
    (if (not (pair? l)) l
      (let ((p (partition
		(lambda (x)
		  (comp (car l) x)) (cdr l))))
        (append (qs (car p))
	  (cons (car l) '())
	  (qs (cadr p))))))))
      (qs lin))))

; 2 dimensional vector mutator
(define (vec2-set! v i j to)
  (vector-set! (vector-ref v i) j to))

; 2 dimensional vector accessor
(define (vec2-ref v i j)
  (vector-ref (vector-ref v i) j))

; switch key/value pairs
(define (reverse-pairs l)
  (map (lambda (a)
	(cons (cdr a) (car a))) l))

; dedupe a list
(define (uniq lin . opcomp)
  (let ((comp (if (pair? opcomp)
	(car opcomp) eq?)))
  (letrec ((loop (lambda (l rv)
    (if (null? l) (reverse rv)
      (if (comp
	    (if (null? rv)
		(object->string (gensym))
		(car rv))
	    (car l))
	(loop (cdr l) rv)
	(loop (cdr l)
		(cons (car l) rv)))))))
    (loop (qsort lin) '()))))

; calculate the intersection of 2 lists
(define (retain-all l1 l2)
  (filter (lambda (x)
	(memq x l2)) l1))

; remove anything from l1 that is
; in l2
(define (remove-all l1 l2)
  (filter (lambda (x)
	(not (memq x l2))) l1))

; intersection of two sets
(define (intersect l1 l2)
  (retain-all (uniq l1) l2))

; randomize a list
(define (shuffle lin)
  (qsort lin (lambda (a b)
	(= (random 2) 0))))

; are these functions equal given the
; same input compared with the
; given comparator?
(define (fcmp cmp fa fb . a)
  (cmp (apply fa a) (apply fb a)))